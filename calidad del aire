# Este programa implementa un método de interpolación de Newton para estimar la 
# calidad del aire (PM2.5) en un punto. Al final, el programa imprime la mejor 
# combinación de ubicaciones que maximiza la calidad del aire.

import numpy as np
import random

# Interpolación de Newton
def newton_interpolation(x, y, x_value):
    n = len(x)
    a = np.zeros((n, n))
    a[:, 0] = y

    for j in range(1, n):
        for i in range(n - j):
            a[i][j] = (a[i + 1][j - 1] - a[i][j - 1]) / (x[i + j] - x[i])

    result = a[0][0]
    for j in range(1, n):
        term = a[0][j]
        for i in range(j):
            term *= (x_value - x[i])
        result += term

    return result

# Datos de calidad del aire (PM2.5 en microgramos/m³)
x_points = [0, 1, 2, 3, 4]
y_points = [35, 45, 30, 50, 60]  # Niveles de PM2.5 en diferentes estaciones

# Estimación de calidad del aire en un punto no medido
x_value = 2.5
estimated_quality = newton_interpolation(x_points, y_points, x_value)
print(f"Calidad del aire estimada en x = {x_value}: {estimated_quality:.2f} µg/m³")

# Algoritmo genético para optimizar la ubicación de estaciones de monitoreo
def fitness_function(locations):
    # Evaluar la calidad del aire total en las ubicaciones propuestas
    total_quality = sum([newton_interpolation(x_points, y_points, loc) for loc in locations])
    return total_quality  # Queremos maximizar esta calidad total

def mutate(locations):
    index = random.randint(0, len(locations) - 1)
    locations[index] = random.uniform(0, 4)  # Mutar una estación en el rango de x_points
    return locations

def crossover(parent1, parent2):
    crossover_point = random.randint(0, len(parent1) - 1)
    child = parent1[:crossover_point] + parent2[crossover_point:]
    return child

def genetic_algorithm(population_size, generations):
    population = [random.sample(range(0, 5), 3) for _ in range(population_size)]  # 3 estaciones

    for generation in range(generations):
        population.sort(key=fitness_function, reverse=True)
        next_generation = population[:2]  # Seleccionar los mejores

        while len(next_generation) < population_size:
            parent1, parent2 = random.sample(population[:10], 2)
            child = crossover(parent1, parent2)
            child = mutate(child)
            next_generation.append(child)

        population = next_generation

    return population[0]

# Ejemplo de uso del algoritmo genético
best_locations = genetic_algorithm(population_size=100, generations=50)
print("Mejores ubicaciones para nuevas estaciones de monitoreo:", best_locations)
